// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="NCO2,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.210250,HLS_SYN_LAT=44,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=11,HLS_SYN_FF=4276,HLS_SYN_LUT=5789}" *)

module NCO2 (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 45'b1;
parameter    ap_ST_fsm_state2 = 45'b10;
parameter    ap_ST_fsm_state3 = 45'b100;
parameter    ap_ST_fsm_state4 = 45'b1000;
parameter    ap_ST_fsm_state5 = 45'b10000;
parameter    ap_ST_fsm_state6 = 45'b100000;
parameter    ap_ST_fsm_state7 = 45'b1000000;
parameter    ap_ST_fsm_state8 = 45'b10000000;
parameter    ap_ST_fsm_state9 = 45'b100000000;
parameter    ap_ST_fsm_state10 = 45'b1000000000;
parameter    ap_ST_fsm_state11 = 45'b10000000000;
parameter    ap_ST_fsm_state12 = 45'b100000000000;
parameter    ap_ST_fsm_state13 = 45'b1000000000000;
parameter    ap_ST_fsm_state14 = 45'b10000000000000;
parameter    ap_ST_fsm_state15 = 45'b100000000000000;
parameter    ap_ST_fsm_state16 = 45'b1000000000000000;
parameter    ap_ST_fsm_state17 = 45'b10000000000000000;
parameter    ap_ST_fsm_state18 = 45'b100000000000000000;
parameter    ap_ST_fsm_state19 = 45'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 45'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 45'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 45'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 45'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 45'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 45'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 45'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 45'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 45'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 45'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 45'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 45'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 45'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 45'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 45'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 45'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 45'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 45'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 45'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 45'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 45'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 45'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 45'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 45'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 45'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 45'b100000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv64_4046800000000000 = 64'b100000001000110100000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv64_3F97D6B65A9A8049 = 64'b11111110010111110101101011011001011010100110101000000001001001;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_53 = 32'b1010011;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg    ap_rst_n_inv;
wire   [31:0] freqControl;
wire   [23:0] sine_out_V;
reg    sine_out_V_ap_vld;
reg   [31:0] accumulator_V;
wire   [12:0] sine_V_address0;
reg    sine_V_ce0;
wire   [22:0] sine_V_q0;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state3;
wire   [63:0] grp_fu_107_p1;
reg   [63:0] tmp_s_reg_296;
wire   [0:0] ap_CS_fsm_state7;
wire   [63:0] grp_fu_102_p2;
reg   [63:0] tmp_1_reg_301;
wire   [0:0] ap_CS_fsm_state38;
wire   [0:0] ap_CS_fsm_state44;
wire   [63:0] grp_fu_97_p2;
reg   [63:0] val_assign_reg_311;
wire   [31:0] tmp_3_fu_139_p1;
wire   [31:0] tmp_2_fu_269_p2;
wire   [0:0] ap_CS_fsm_state45;
wire   [12:0] phitmp_fu_123_p4;
wire   [31:0] result_V_fu_255_p3;
reg   [31:0] freqControl_assign_fu_68;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] ap_CS_fsm_state39;
wire   [0:0] ap_CS_fsm_state8;
wire   [63:0] p_Val2_s_fu_144_p1;
wire   [51:0] loc_V_1_fu_157_p1;
wire   [52:0] p_Result_s_fu_161_p3;
wire   [10:0] loc_V_fu_147_p4;
wire   [11:0] tmp_i_i_i_cast1_fu_173_p1;
wire   [11:0] sh_assign_fu_177_p2;
wire   [10:0] tmp_2_i_i_fu_191_p2;
wire   [0:0] isNeg_fu_183_p3;
wire  signed [11:0] tmp_2_i_i_cast_fu_197_p1;
wire   [11:0] sh_assign_1_fu_201_p3;
wire  signed [31:0] sh_assign_1_cast_fu_209_p1;
wire   [52:0] tmp_4_i_i_cast_fu_217_p1;
wire   [135:0] tmp_i_i_fu_169_p1;
wire   [135:0] tmp_4_i_i_fu_213_p1;
wire   [52:0] tmp_5_i_i_fu_221_p2;
wire   [0:0] tmp_fu_233_p3;
wire   [135:0] tmp_7_i_i_fu_227_p2;
wire   [31:0] tmp_4_fu_241_p1;
wire   [31:0] tmp_5_fu_245_p4;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 accumulator_V = 32'b00000000000000000000000000000000;
#0 ap_CS_fsm = 45'b1;
end

NCO2_sine_V #(
    .DataWidth( 23 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
sine_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sine_V_address0),
    .ce0(sine_V_ce0),
    .q0(sine_V_q0)
);

NCO2_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
NCO2_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .freqControl(freqControl),
    .sine_out_V(sine_out_V),
    .sine_out_V_ap_vld(sine_out_V_ap_vld)
);

NCO2_dmul_64ns_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
NCO2_dmul_64ns_64bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_1_reg_301),
    .din1(ap_const_lv64_4046800000000000),
    .ce(1'b1),
    .dout(grp_fu_97_p2)
);

NCO2_ddiv_64ns_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
NCO2_ddiv_64ns_64cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_s_reg_296),
    .din1(ap_const_lv64_3F97D6B65A9A8049),
    .ce(1'b1),
    .dout(grp_fu_102_p2)
);

NCO2_sitodp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
NCO2_sitodp_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(freqControl_assign_fu_68),
    .ce(1'b1),
    .dout(grp_fu_107_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        accumulator_V <= tmp_2_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        freqControl_assign_fu_68 <= freqControl;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_1_reg_301 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_s_reg_296 <= grp_fu_107_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        val_assign_reg_311 <= grp_fu_97_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        sine_V_ce0 = 1'b1;
    end else begin
        sine_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        sine_out_V_ap_vld = 1'b1;
    end else begin
        sine_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state45 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign isNeg_fu_183_p3 = sh_assign_fu_177_p2[ap_const_lv32_B];

assign loc_V_1_fu_157_p1 = p_Val2_s_fu_144_p1[51:0];

assign loc_V_fu_147_p4 = {{p_Val2_s_fu_144_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign p_Result_s_fu_161_p3 = {{1'b1}, {loc_V_1_fu_157_p1}};

assign p_Val2_s_fu_144_p1 = val_assign_reg_311;

assign phitmp_fu_123_p4 = {{accumulator_V[ap_const_lv32_1F : ap_const_lv32_13]}};

assign result_V_fu_255_p3 = ((isNeg_fu_183_p3[0:0] === 1'b1) ? tmp_4_fu_241_p1 : tmp_5_fu_245_p4);

assign sh_assign_1_cast_fu_209_p1 = $signed(sh_assign_1_fu_201_p3);

assign sh_assign_1_fu_201_p3 = ((isNeg_fu_183_p3[0:0] === 1'b1) ? tmp_2_i_i_cast_fu_197_p1 : sh_assign_fu_177_p2);

assign sh_assign_fu_177_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_i_cast1_fu_173_p1));

assign sine_V_address0 = tmp_3_fu_139_p1;

assign sine_out_V = sine_V_q0;

assign tmp_2_fu_269_p2 = (accumulator_V + result_V_fu_255_p3);

assign tmp_2_i_i_cast_fu_197_p1 = $signed(tmp_2_i_i_fu_191_p2);

assign tmp_2_i_i_fu_191_p2 = (ap_const_lv11_3FF - loc_V_fu_147_p4);

assign tmp_3_fu_139_p1 = phitmp_fu_123_p4;

assign tmp_4_fu_241_p1 = tmp_fu_233_p3;

assign tmp_4_i_i_cast_fu_217_p1 = $unsigned(sh_assign_1_cast_fu_209_p1);

assign tmp_4_i_i_fu_213_p1 = $unsigned(sh_assign_1_cast_fu_209_p1);

assign tmp_5_fu_245_p4 = {{tmp_7_i_i_fu_227_p2[ap_const_lv32_53 : ap_const_lv32_34]}};

assign tmp_5_i_i_fu_221_p2 = p_Result_s_fu_161_p3 >> tmp_4_i_i_cast_fu_217_p1;

assign tmp_7_i_i_fu_227_p2 = tmp_i_i_fu_169_p1 << tmp_4_i_i_fu_213_p1;

assign tmp_fu_233_p3 = tmp_5_i_i_fu_221_p2[ap_const_lv32_34];

assign tmp_i_i_fu_169_p1 = p_Result_s_fu_161_p3;

assign tmp_i_i_i_cast1_fu_173_p1 = loc_V_fu_147_p4;

endmodule //NCO2
